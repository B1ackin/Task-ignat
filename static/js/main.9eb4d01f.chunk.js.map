{"version":3,"sources":["App.module.css","Dialog.module.css","minion.jpg","common/InputUniversal/InputUniversal.module.css","common/Checkbox/Checkbox.module.css","common/Button/Button.module.css","Dialog.tsx","App.tsx","serviceWorker.ts","Todolist/Todolist.tsx","Todolist/AppTodolist.tsx","input/input.tsx","input/App-input.tsx","common/InputUniversal/InputUniversal.tsx","common/Checkbox/Checkbox.tsx","common/Button/Button.tsx","common/AllComponent/AllComponent.tsx","index.tsx"],"names":["module","exports","Dialog","props","className","d","dialog","name","message","time","App","c","telegram","row","img","src","ava","Boolean","window","location","hostname","match","Todolist","tasks","map","task","priority","onClick","removeTask","id","setFilter","AppTodolist","useState","setTasks","filter","tasksForToDoList","filteredTask","Input","newMessage","setNewMessage","Hello","alert","value","onChange","e","currentTarget","onKeyPress","charCode","addName","length","AppInput","setMessage","newName","v1","newArr","InputUniversal","classes","class","label","type","CheckboxUniversal","checked","ButtonUniversal","AllComponentn","setValue","setChecked","newValue","ReactDOM","render","StrictMode","AllComponent","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9eb4d01f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"telegram\":\"App_telegram__1ycNk\",\"dialog\":\"App_dialog__k0ubr\",\"row\":\"App_row__3c2Yv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"Dialog_dialog__3UMNu\",\"name\":\"Dialog_name__2olPs\",\"message\":\"Dialog_message__2DNXt\",\"time\":\"Dialog_time__2t2Zh\"};","module.exports = __webpack_public_path__ + \"static/media/minion.b09f37e3.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"green-input\":\"InputUniversal_green-input__l8S3n\",\"red-input\":\"InputUniversal_red-input__340j7\",\"standard-input\":\"InputUniversal_standard-input__10q6r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__uvODV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button-help\":\"Button_button-help__3WZla\"};","import React from 'react';\nimport d from './Dialog.module.css';\n\ntype MessageTypeProps = {\n    name: string\n    message: string\n    time: string\n}\n\nfunction Dialog(props: MessageTypeProps) {\n    return (\n        <div className={d.dialog}>\n            <div className={d.name}>{props.name}</div>\n            <div className={d.message}>{props.message}</div>\n            <div className={d.time}>{props.time}</div>\n        </div>\n    );\n}\n\n\nexport default Dialog;\n","import React from 'react';\nimport c from './App.module.css';\nimport ava from './minion.jpg';\nimport Dialog from \"./Dialog\";\n\n\nfunction App() {\n    return (\n        <div className={c.telegram}>\n            <div className={c.row}>\n                <img className={c.img} src={ava}/>\n            </div>\n            <div className={c.row}>\n                <div className={c.dialog}>\n                    <Dialog message=\"Привет, как дела?\" name=\"Valera\" time=\"20:00\"/>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './TodolistStyle.css';\r\nimport {FilterValueType} from \"./AppTodolist\";\r\n\r\nexport type TaskType = {\r\n    id: number\r\n    name: string\r\n    priority: string\r\n}\r\n\r\ntype PropsType = {\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: number) => void\r\n    setFilter: (value: FilterValueType) => void\r\n}\r\n\r\nfunction Todolist(props:PropsType) {\r\n    return (\r\n        <div className={\"bgall\"}>\r\n        <div >\r\n            <ul >\r\n                {\r\n\r\n                    props.tasks.map( task => <li className={\"column\"}>\r\n                        <div className=\"priority\">Name: {task.name}</div>\r\n                            <div className=\"priority\"><b>Priority: {task.priority}</b></div>\r\n                            <button onClick={ () => { props.removeTask(task.id)}}>Удалить</button>\r\n                        </li>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n            <div className={\"buttons\"}>\r\n\r\n                <button className=\"button-filter\" onClick={() => props.setFilter('All')}>ALL</button>\r\n                <button className=\"button-filter\" onClick={() => props.setFilter('high')}>HIGH</button>\r\n                <button className=\"button-filter\" onClick={() => props.setFilter('middle')}>MIDDLE</button>\r\n                <button className=\"button-filter\" onClick={() => props.setFilter('low')}>LOW</button>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default Todolist;","import React, {useState} from 'react';\r\nimport Todolist, {TaskType} from \"./Todolist\";\r\n\r\nexport type FilterValueType = \"All\" | \"high\" | \"middle\" | \"low\"\r\n\r\nfunction AppTodolist() {\r\n\r\n    let [tasks, setTasks] = useState([\r\n        {id: 1, name: \"Work\", priority: \"high\"},\r\n        {id: 2, name: \"Play\", priority: \"low\"},\r\n        {id: 3, name: \"Learn\", priority: \"high\"},\r\n        {id: 4, name: \"Game\", priority: \"low\"},\r\n        {id: 5, name: \"Walk\", priority: \"middle\"}\r\n\r\n    ]);\r\n\r\n    let [filter, setFilter] = useState<FilterValueType>(\"All\")\r\n\r\n    function removeTask(id: number) {\r\n        let filteredTask = tasks.filter( task => task.id !== id) // Пробегается по массиву и создает новый массив с отфильтрованными тасками\r\n        setTasks(filteredTask)\r\n    }\r\n\r\n\r\n    let tasksForToDoList = tasks;\r\n    if(filter === \"high\") {\r\n        tasksForToDoList = tasks.filter(task => task.priority === \"high\")\r\n    }\r\n    if(filter === \"middle\") {\r\n        tasksForToDoList = tasks.filter(task => task.priority === \"middle\")\r\n    }\r\n    if(filter === \"low\") {\r\n            tasksForToDoList = tasks.filter(task => task.priority === \"low\")\r\n    }\r\n\r\n    // if(filter === \"completed\") {\r\n    //     tasksForToDoList = tasks.filter(task => task. === true)\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <Todolist tasks={tasksForToDoList}\r\n                      removeTask={removeTask}\r\n                      setFilter={setFilter}/>\r\n        </div>\r\n    );\r\n\r\n\r\n    //\r\n}\r\n\r\n\r\n\r\nexport default AppTodolist;","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {NewArray} from \"./App-input\";\r\nimport './input.css';\r\n\r\nexport type InputType = {\r\n    message: Array<NewArray>\r\n    addName: (name: string) => void\r\n}\r\n\r\nfunction Input(props: InputType) {\r\n    const [newMessage, setNewMessage] = useState(\"\"); // для инпута\r\n\r\n    function Hello(newMessage: string) {\r\n        if (newMessage) alert(\"Hi \" + newMessage)\r\n    }\r\n\r\n    const onClickPress = () => {\r\n        props.addName(newMessage)\r\n        Hello(newMessage)\r\n        setNewMessage('')\r\n    }\r\n    const onKeyPress = (e: KeyboardEvent) => {\r\n        if(e.charCode === 13) {\r\n            props.addName(newMessage)\r\n            Hello(newMessage)\r\n            setNewMessage('')\r\n        }\r\n    }\r\n\r\n    const ChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewMessage(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div className={\"input\"}>\r\n            <input value={newMessage}\r\n                   onChange={ChangeInput}\r\n                   onKeyPress={onKeyPress}\r\n            />\r\n            <button onClick={onClickPress}>+</button>\r\n            <span>{props.message.length}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Input;","import React, {useState} from 'react';\r\nimport {v1} from \"uuid\";\r\nimport Input from \"./input\";\r\n\r\n\r\nexport type NewArray = {\r\n    name: string,\r\n    id: string\r\n}\r\n\r\nfunction AppInput() {\r\n    const [message, setMessage] = useState<Array<NewArray>>([])\r\n\r\n    let addName = (newMessage: string) => {\r\n        if (newMessage) {\r\n            let newName = {name: newMessage, id: v1()}\r\n            let newArr = [...message, newName]\r\n            setMessage(newArr)\r\n        }\r\n    }\r\n    return (\r\n        <Input addName={addName} message={message}/>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default AppInput;","import React from 'react';\r\nimport classes from './InputUniversal.module.css'\r\n\r\n\r\ntype PropsType = {\r\n    class: 'green-input' | 'red-input' | 'standard-input'\r\n    label?: string\r\n    message?: string\r\n    error?: string\r\n    onChange: (value: string) => void\r\n    value: string\r\n}\r\n\r\nexport function InputUniversal(props: PropsType) {\r\n    return (\r\n            <div className={classes[props.class]}>\r\n            <label>{props.label}</label>\r\n            <input type=\"text\" value={props.value} onChange={e => props.onChange(e.currentTarget.value)} />\r\n            <div>{props.message}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport classes from './Checkbox.module.css'\r\n\r\n\r\nexport type CheckboxType = {\r\n    checked: boolean\r\n    onChange: (check: boolean) => void\r\n    class: \"checkbox\"\r\n}\r\n\r\nexport function CheckboxUniversal(props: CheckboxType) {\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"checkbox\"\r\n                   className={classes[props.class]}\r\n                   checked={props.checked}\r\n                   onChange={e => props.onChange(e.currentTarget.checked)}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\nimport classes from './Button.module.css'\r\n\r\n\r\nexport type ButtonHelpType = {\r\n    name: string\r\n    class: \"button-help\"\r\n}\r\n\r\nexport function ButtonUniversal(props: ButtonHelpType) {\r\n\r\n\r\n    return (\r\n        <button className={classes[props.class]}>{props.name}</button>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport {InputUniversal} from \"../InputUniversal/InputUniversal\";\r\nimport {CheckboxUniversal} from \"../Checkbox/Checkbox\";\r\nimport {ButtonUniversal} from \"../Button/Button\";\r\n\r\n\r\n\r\nfunction AllComponentn() {\r\n    const [value, setValue] = useState<string>('')\r\n\r\n    const onChangeInputHandler = (newValue: string) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(true)\r\n    const onChangeCheckBoxHandler = (newValue: boolean) => {\r\n        setChecked(!checked)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <InputUniversal\r\n                label={'Login'}\r\n                message={'Login is required'}\r\n                class={'green-input'}\r\n                onChange={onChangeInputHandler}\r\n                value={value}\r\n            />\r\n            <div>\r\n                <CheckboxUniversal\r\n                    checked={checked}\r\n                    class={\"checkbox\"}\r\n                    onChange={onChangeCheckBoxHandler}\r\n                />\r\n            </div>\r\n            <div>\r\n                <ButtonUniversal\r\n                    class={\"button-help\"}\r\n                    name={\"Help Me\"}\r\n                />\r\n            </div>\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AllComponentn;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Todolist from \"./Todolist/Todolist\";\r\nimport AppTodolist from \"./Todolist/AppTodolist\";\r\nimport Input from \"./input/input\";\r\nimport AppInput from \"./input/App-input\";\r\nimport AllComponentn from \"./common/AllComponent/AllComponent\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n    <AppTodolist />\r\n    <AppInput />\r\n    <AllComponentn />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}